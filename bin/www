#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug_webserver = require('debug')('MyLastIPWebApp:webserver');
var debug_daemon = require('debug')('MyLastIPWebApp:daemonserver');
var http = require('http');
var net = require('net');

/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || '3000');
var ipaddress = process.env.OPENSHIFT_NODEJS_IP || "127.0.0.1";
var port_webserver = process.env.OPENSHIFT_NODEJS_PORT || 8080;
var port_daemon = process.env.OPENSHIFT_NODEJS_PORT || 25000;
app.set('port', port_webserver);

/**
 * Create HTTP server and the daemon server
 */

var server = http.createServer(app);

/**
 * MyLastIPd server
 */
var dserver = net.createServer(function (socket) {
    debug_daemon("Client connected at address " + socket.remoteAddress);
    socket.on('data', function (data) {
        console.log(data.toString());
    });
});
dserver.on('listening', function (listening) {
    var address = dserver.address();
    debug_daemon("Daemon server started, listening on " + address.localAddress + ":" + address.port);
    console.log("Daemon is listening");
});
dserver.on('error', function (error) {
    switch (error.code) {
        case 'EACCES':
            console.error('Listen requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error('Listen is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port_webserver, ipaddress);
//dserver.listen(port_daemon, ipaddress);
server.on('error', onError);
server.on('listening', onListening);
//dserver.on('error', onError);
//dserver.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug_webserver('Listening on ' + bind);
}
